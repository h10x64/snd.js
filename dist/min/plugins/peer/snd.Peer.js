/**
 * snd.js - The Sound Library for JavaScript with WebAudioAPI - v.1.0 beta
 * 
 * The MIT License (MIT)
 * copyright (c) 2014 - 2015 N_H <h.10x64@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 **/
!function(a,b){"function"==typeof define&&define.amd?define(["snd.MediaStreamAudioDestination","snd.MediaStreamAudioSource"],b):"object"==typeof exports||(a.snd=b(a.snd))}(this,function(a){var b={},c={},d={},e={},f={},g={};return a.Peer=function(f,g,h){a.AudioUnit.apply(this,arguments);var i=this;b[this.id]=new Peer(g,h),c[this.id]=g?g:void 0,d[this.id]={},e[this.id]={},b[this.id].on("open",function(a){c[i.id]=a,i.onopen()}),b[this.id].on("close",function(){i.onclose()}),b[this.id].on("disconnected",function(){i.ondisconnected()}),b[this.id].on("connection",function(a){var b=a.peer;i.addConnectConnection(a),new Promise(function(a,c){i.onconnection(b,a,c)}).then(function(){},function(){i.getConnect(b).close()})}),b[this.id].on("call",function(b){var c=b.peer;i.addCallConnection(b),new Promise(function(a,b){i.oncall(c,a,b)}).then(function(b,d){b?i.getCall(c).answer(d?d:a.STREAM_MASTER.stream):i.getCall(c).answer()},function(){i.getCall(c).close()})}),Object.defineProperties(this,{peer:{get:function(){return b[this.id]}},peerid:{get:function(){return c[this.id]}},peerID:{get:function(){return this.peerid}},disconnected:{get:function(){return b[this.id].disconnected}},destroyed:{get:function(){return b[this.id].destroyed}}})},a.Peer.prototype=Object.create(a.AudioUnit.prototype),a.Peer.prototype.constructor=a.Peer,a.Peer.prototype.onopen=function(){},a.Peer.prototype.onclose=function(){},a.Peer.prototype.ondisconnected=function(){},a.Peer.prototype.onerror=function(){},a.Peer.prototype.oncall=function(a,b){b(!0)},a.Peer.prototype.onconnection=function(a,b){b()},a.Peer.prototype.onstream=function(){},a.Peer.prototype.oncallclose=function(){},a.Peer.prototype.oncallerror=function(){},a.Peer.prototype.ondata=function(){},a.Peer.prototype.onconnectopen=function(){},a.Peer.prototype.onconnectclose=function(){},a.Peer.prototype.onconnecterror=function(){},a.Peer.prototype.connectPeers=function(){return e&&e[this.id]?Object.keys(e[this.id]):[]},a.Peer.prototype.getConnect=function(a){return e&&e[this.id]?e[this.id][a]:void 0},a.Peer.prototype.callPeers=function(){return d&&d[this.id]?Object.keys(d[this.id]):[]},a.Peer.prototype.getCall=function(a){return d&&d[this.id]?d[this.id][a]:void 0},a.Peer.prototype.streamPeers=function(){return f&&f[this.id]?Object.keys(f[this.id]):[]},a.Peer.prototype.getStream=function(a){return f&&f[this.id]?f[this.id][a]:void 0},a.Peer.prototype.audioSources=function(){return g&&g[this.id]?Object.keys(g[this.id]):[]},a.Peer.prototype.getAudioSource=function(a){return g&&g[this.id]?g[this.id][a]:void 0},a.Peer.prototype.connect=function(a,b){return this.peer.connect(a,b)},a.Peer.prototype.call=function(b,c,d){var e=this.peer.call(b,c?c:a.STREAM_MASTER.stream,d);this.addCallConnection(e)},a.Peer.prototype.connect=function(a,b){var c=this.peer.connect(a,b);this.addCallConnection(c)},a.Peer.prototype.disconnect=function(){this.peer.disconnect()},a.Peer.prototype.destroy=function(){this.peer.destroy()},a.Peer.prototype.setupConnectEvents=function(a){var b=this,c=a.peer;a.on("open",function(){b.onconnectopen(c)}),a.on("data",function(a){b.ondata(c,a)}),a.on("error",function(a){b.onconnecterror(c,a)}),a.on("close",function(){b.onconnectclose(c),b.removeConnectConnection(c)})},a.Peer.prototype.setupCallEvents=function(b){var c=this,d=b.peer;b.on("stream",function(b){f[c.id][d]=b,g[c.id][d]=new a.MediaStreamAudioSource(d,b),c.onstream(d)}),b.on("error",function(a){c.oncallerror(d,a)}),b.on("close",function(){c.oncallclose(d),c.removeCallConnection(d)})},a.Peer.prototype.addCallConnection=function(a){d[this.id]||(d[this.id]={}),f[this.id]||(f[this.id]={}),g[this.id]||(g[this.id]={}),this.setupCallEvents(a),d[this.id][a.peer]=a},a.Peer.prototype.removeCallConnection=function(a){var b=getCall(a);b&&(b.open&&b.close(),d[this.id][a]&&delete d[this.id][a],f[this.id][a]&&delete f[this.id][a],g[this.id][a]&&delete g[this.id][a])},a.Peer.prototype.addConnectConnection=function(a){e[this.id]||(e[this.id]={}),this.setupConnectConnection(a),e[this.id][a.peer]=a},a.Peer.prototype.removeConnectConnection=function(a){var b=this.getConnect(a);b&&(b.open&&b.close(),e[this.id][a]&&delete e[this.id][a])},a});